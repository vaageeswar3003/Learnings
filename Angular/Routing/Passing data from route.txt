Passing static data
===================

app-routing.module.ts
---------------------

const routes: Routes[{
    path: '/users',
    component: UsersComponent,
    data: {id:1, name:'Raju'}
}]

users.component.ts
------------------

export class UsersComponent {
    constructor(private route: ActivatedRoute) {
        this.route.data.subscribe((data) => {
            console.log(data);
        })
    }
}

Passing dynamic data
====================

user.service.ts
---------------

export class User {
    getUser(id: string) {
        if(id === '1') {
            return {
                id: '1',
                name: 'Leela 
            }
        } else {
            return {
                id: '2',
                name: 'Raju'
            }
        }
    }
}

user-resolve.service.ts
-----------------------

interface User {
    id: string;
    name: string;
}

@Injectable()
export class UserResolveService implements Resolve<User> {

    constructor(private userService: UserService) { }

    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): User | Observable<User> | Promise<User> {
        let id = route.params['id'];
        let details = this.userService.getUser();
        return details;
    } 
}

app-routing.module.ts
---------------------

const routes:Routes = [{
    path: '/user/:id',
    component: UsersComponent,
    resolve: {user: UserResolveService}
}]

user.component.ts
-----------------

export class UserComponent {
    constructor(private route: ActivatedRoute) {
        this.route.data.subscribe((data) => {
            console.log(data);
        })
    }
}